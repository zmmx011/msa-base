server:
  port: 8080
spring:
  application:
    name: licensingservice # 유레카에 등록할 인스턴스 명
  config:
    import: "optional:configserver:"
  cloud:
    config:
      discovery:
        enabled: true # 유레카에서 검색
management:
  endpoint:
    health:
      show-details: always # actuator에서 디테일한 정보들을 확인하기 위해 설정
  health:
    circuitbreakers:
      enabled: true # actuator를 통해 circuitbraker 상태를 확인하기 위해 설정
    diskspace:
      enabled: true
eureka:
  client:
    registerWithEureka: true # 유레카에 서비스 등록
    fetchRegistry: true # 레지스트리 사본을 로컬로 캐시한다
    serviceUrl:
      defaultZone: ${EUREKASERVER_URI:http://localhost:8761/eureka} # 유레카 서비스 위치
resilience4j:
  circuitbreaker:
    configs:
      default:
        registerHealthIndicator: true # actuator를 통해 circuitbraker 상태를 확인하기 위해 설정
        minimumNumberOfCalls: 4 # Circuit Breaker가 에러 비율 또 slow call 비율을 계산하기 전에 요구되는 최소한의 요청 수
        failureRateThreshold: 20  # 에러 비율 (퍼센트)로 해당 값 이상으로 에러 발생시 서킷이 Open 된다.
        slowCallDurationThreshold: 3s # 해당 값 (ms)가 넘어가는 호출은 느린 호출로 분류한다.
        slowCallRateThreshold: 20 # 느린 호출 비율 (퍼센트)이 설정 값 이상이면 서킷이 Open 된다.
        waitDurationInOpenState: 10s  # 서킷의 상태가 Open에서 Half-open으로 변경되기 전에 Circuit Breaker가 기다리는 시간
    instances:
      service:
        baseConfig: default
  bulkhead:
    instances:
      service:
        maxConcurrentCalls: 25  # 허가된 동시 실행 수를 25로 지정
        maxWaitDuration: 0  # 포화 상태의 Bulkhead에 진입하기 위해 block 되는 최대 시간, 값이 0이므로 바로 요청을 막는다.
  ratelimiter:
    instances:
      service:
        limitForPeriod: 50  # limitRefreshPeriod 기간 동안 허용되는 요청 수
        limitRefreshPeriod: 500ns # limit refresh 기간
        timeoutDuration: 5s # 허가를 위해 쓰레드가 대기하는 기본 시간
        registerHealthIndicator: true
  retry:
    instances:
      service:
        maxRetryAttempts: 3 # 최대 재시도 수
        waitDuration: 500ms # 재시도 사이에 고정된 시간
